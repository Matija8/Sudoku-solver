{"mappings":"MAAaA,cACSC,QAAAA,YAAAA,OACbC,WAAY,EAGRA,cAAUC,GACdA,OAGEF,YAAYG,UAAUC,OAAM,gBAHvBC,KACLL,YAAYG,UAAUG,IAAG,uBCGvBC,wBAQTC,GAAW,EAAKC,IAChBA,EAAM,KAAIC,WACVA,SAMKC,YAAa,OACbC,KAAOH,OACPI,UAAYL,EACjBM,QAAQC,SAASL,EAAU,2BACtBV,YAAcU,OACdM,MAAQ,IAAIjB,EAASW,GAGjBT,4BACGU,WAGHV,cAAUC,QACdS,WAAaT,OACbc,MAAMf,UAAYC,EAGdO,sBACGG,KAGHH,QAAIQ,GACb,GAAIA,IAAMZ,KAAUO,MAAIP,KAASQ,UAAS,YAGrCD,KAAOK,EACZ,MAAMC,EAAqB,OAAXD,EAAe,GAAQE,OAAOF,QACzCjB,YAAYoB,UAAYF,GCrD1B,MAsBDG,EAAS,KACb,MAAMC,EAAcC,SAASC,cAAa,OAC1CF,EAAYnB,UAAUG,IAAG,gBACzB,MAAMmB,EAAS,OAEV,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMC,EAAYJ,SAASC,cAAa,OACxCG,EAAUxB,UAAUG,IAAG,cACvBgB,EAAYM,YAAYD,GACxBF,EAAUC,GAAC,OAEN,IAAIG,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMC,EAAaC,EAAeL,EAAGG,GACrCF,EAAUC,YAAYE,GACtBL,EAAUC,GAAGG,GAAKC,sBAGbR,YAAaG,IAGlBM,EAAc,SAAqCL,EAAWG,GAClE,MAAMC,EAAaP,SAASC,cAAa,gBACzCM,EAAWE,KAAI,SACfF,EAAWG,UAAY,EACvBH,EAAWI,MAAMC,WAAU,cAC3BL,EAAW3B,UAAUG,IAAG,eACxB8B,EAAcN,EAAYJ,EAAGG,GAC7BC,EAAWO,aAAY,WAAW,MAC3BP,GAGHM,EAAa,SACjBE,EACAC,EACAC,GAEIA,EAAM,GAAM,GACdF,EAAQnC,UAAUG,IAAG,sBAEX,IAARkC,GACFF,EAAQnC,UAAUG,IAAG,uBAEnBiC,EAAM,GAAM,GACdD,EAAQnC,UAAUG,IAAG,uBAEX,IAARiC,GACFD,EAAQnC,UAAUG,IAAG,wBAInBmC,EAAe,KACnB,MAAMC,EAAWnB,SAASC,cAAa,iBACvCkB,EAAStB,UAAS,QAClBsB,EAASvC,UAAUG,IAAG,SAAS,kBACxBoC,SC1EIC,cACkBC,QAAAA,OAAAA,EAEtBC,kBACL,MAAMC,EAAe,IAAIC,QACpB,IAAIrB,EAAI,EAAGA,EAAI,EAAGA,IAAK,KACrB,MAAMsB,KAAI3C,KAAS4C,uBAAuBvB,GAC7CoB,EAAaxC,IAAI0C,OAEd,MAAME,KAAI7C,KAAS8C,uBAAuBzB,GAC7CoB,EAAaxC,IAAI4C,OAGhB,IAAIE,EAAI,EAAGA,EAAI,EAAGA,QAChB,IAAIvB,EAAI,EAAGA,EAAI,EAAGA,IAAC,IACjB,MAAMmB,KAAI3C,KAASgD,0BAA0BD,EAAGvB,GACnDiB,EAAaxC,IAAI0C,UAIhBF,EAGDG,uBAAuBV,UAC7BzB,QAAQC,OAAO,GAAKwB,GAAOA,EAAM,EAAC,0BAC3BI,EAAcW,sBAAqBjD,KAAMuC,OAAOL,IAGjDY,uBAAuBX,GAC7B1B,QAAQC,OAAO,GAAKyB,GAAOA,EAAM,EAAC,0BAClC,MAAMe,EAAK,OACN,IAAIhB,EAAM,EAAGA,EAAM,EAAGA,IACzBgB,EAAMC,KAAInD,KAAMuC,OAAOL,GAAKC,WAEvBG,EAAcW,sBAAsBC,GAGrCF,0BAA0BI,EAAeC,GAC/C,MAAMH,EAAK,OACN,IAAIhB,EAAM,EAAI,EAAImB,EAAOnB,EAAM,EAAI,EAAImB,EAAOnB,IAAG,IAC/C,IAAIC,EAAM,EAAI,EAAIiB,EAAOjB,EAAM,EAAI,EAAIiB,EAAOjB,IACjDe,EAAMC,KAAInD,KAAMuC,OAAOL,GAAKC,WAGzBG,EAAcW,sBAAsBC,gCAGRA,GACnC,MAAMT,EAAe,IAAIC,IACnBY,EAAW,IAAIZ,IACfa,EAAO,IAAIb,QACZ,MAAMtC,KAAO8C,EAAMM,KAAKb,GAASA,EAAKvC,MAC7B,OAARA,IAGAmD,EAAKE,IAAIrD,IACXkD,EAASrD,IAAIG,GAEfmD,EAAKtD,IAAIG,QAEN,MAAMuC,KAAQO,EACA,OAAbP,EAAKvC,KAGLkD,EAASG,IAAId,EAAKvC,MACpBqC,EAAaxC,IAAI0C,UAGdF,SC9DEiB,cAICC,QAsFJC,wBAAuB,CAC7B1B,EACAC,EACAQ,KAEAA,EAAKkB,iBAAgB,WAAaC,IAChCA,EAAMC,iBACN,MAAMC,EAAepD,GACjBkD,EAAMG,OAAeC,MAAQtD,EAC3BiC,EAAI7C,KAAQmE,gBAAgBjC,EAAKC,GACjC/B,EAAMgE,OAAON,EAAMO,KACY,GAAKjE,GAAOA,GAAO,OAEjDkE,gBAAgBzB,EAAMzC,IAAQ4D,EAAYlD,OAAOV,IAGtD,2BAA+BmE,SAAST,EAAMO,MAAGrE,KAC5CsE,gBAAgBzB,EAAM,OAASmB,EAAW,aAK7CQ,2BAA0B,KAChCtD,SAAS2C,iBAAgB,WAAaC,IACvB,MAATA,EAAMO,KAAWrE,KACdyE,6BA9GT,MAAKrD,UAAGA,EAASsD,UAAEA,EAASrC,SAAEA,GFbZ,WAMpB,MAAMqC,EAAYxD,SAASC,cAAa,OACxCuD,EAAU5E,UAAUG,IAAG,cAEvB,MAAKgB,YAAGA,EAAWG,UAAEA,GAAcJ,IACnC0D,EAAUnD,YAAYN,GAEtB,MAAMoB,EAAWD,WACjBsC,EAAUnD,YAAYc,cAMbjB,YAAWsD,WAAWrC,GENcsC,QACtCpC,OAASmB,EAAiBkB,aAAaxD,QACvCyD,cAAgB,IAAIvC,EAAatC,KAAMuC,QAC5CoB,EAAKpC,YAAYmD,OAIZ,IAAII,EAAM,EAAGA,EAAM,EAAGA,IAAG,IACvB,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IAAG/E,KACvB4D,wBAAwBkB,EAAKC,EAAK3D,EAAU0D,GAAKC,IAQ1D1C,EAASwB,iBAAgB,SAHN,UACZY,iCAIFD,6BAGIQ,kBACT,MAAMC,EAAY,OACb,IAAI5D,EAAI,EAAGA,EAACrB,KAAQuC,OAAO2C,OAAQ7D,IACtC4D,EAAa5D,GAACrB,KAASuC,OAAOlB,GAAGmC,KAAKb,GAASA,EAAKvC,aAE/C6E,EAGED,gBAAYG,GAEF,IAAI5C,EAGvB,GAFoB,KADGA,EAGJ4C,GAFVD,QAAgB3C,EAAO6C,OAAON,GAAuB,IAAfA,EAAII,aAO9C,IAAIJ,EAAM,EAAGA,EAAM,EAAGA,IAAG,IACvB,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IAAG/E,KACvBuC,OAAOuC,GAAKC,GAAK3E,IAAM+E,EAAUL,GAAKC,QAN7CtE,QAAQ4E,MAAK,iBAAmBF,uBAWRG,GAC1B,MAAM/C,EAAM,OACP,IAAIlB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1BkB,EAAOlB,GAAC,OACH,IAAIG,EAAI,EAAGA,EAAI,EAAGA,IACrBe,EAAOlB,GAAGG,GAAK,IAAItB,EAAU,CAAGG,WAAYiF,EAAUjE,GAAGG,YAGtDe,EAGDkC,yBACN,MAAMhC,EAAYzC,KAAQwC,sBACrB,MAAMG,KAAI3C,KAASuF,cACtB5C,EAAK/C,WAAa6C,EAAagB,IAAId,GAI/B6C,6BACDD,cAAcE,SAAS9C,IAC1BA,EAAK/C,WAAY,KAIbuE,gBAAgBjC,EAAaC,eACvBI,OAAOL,GAAKC,GAGlBoD,cACN,MAAMrC,EAAK,OACN,MAAMwC,KAAG1F,KAASuC,OAAM,IACtB,MAAMI,KAAQ+C,EACjBxC,EAAMC,KAAKR,UAGRO,EAiCDoB,gBAAgB3B,EAAkBvC,GAExC,YADKoF,2BH1HC,KAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGjB,SG2HrBnE,KAChBuC,EAAKvC,IAAMA,EACTJ,KAAO2F,YAEPC,MAAK,YAEA,GAKHD,uBACME,4BAA8D,IAAtC7F,KAAWwC,kBAAkBsD,KAG3DD,uCACMN,cAAcH,OAAOzC,GAAsB,OAAbA,EAAKvC,MAGzCoC,8BACMqC,cAAcrC,oBCpJpB,SAAmCuD,EAAM,QACjD,MAAMpC,EAAOzC,SAAS8E,eAAeD,GACrC,IAAKpC,cACHlD,QAAQ4E,MAAK,uDAGf,MAAMY,EAAS,IAAIvC,EAAiBC,GACpCzC,SAAS2C,iBAAgB,YAAcC,IACxB,MAATA,EAAMO,KACR5D,QAAQyF,MAAMD,EAAOjB,gBAK3BmB","sources":["src/View/CellView.ts","src/Model/sudokuCell.ts","src/View/sudokuView.ts","src/Controller/cell-validator.ts","src/Controller/sudoku-controller.ts","src/main.ts"],"sourcesContent":["export class CellView {\n  constructor(private _DOMElement: HTMLElement) {\n    this.isCorrect = true;\n  }\n\n  public set isCorrect(correct: boolean) {\n    if (!correct) {\n      this._DOMElement.classList.add('invalid-cell');\n    } else {\n      this._DOMElement.classList.remove('invalid-cell');\n    }\n  }\n}\n","import { CellView } from '../View/CellView';\n\nexport type SudokuCellValue = null | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;\n\nexport const isSudokuValue = function isValidSudokuCellValue(\n  n: number | null\n): n is SudokuCellValue {\n  return [null, 1, 2, 3, 4, 5, 6, 7, 8, 9].includes(n);\n};\n\nexport class SudokuCell {\n  private _val: SudokuCellValue;\n  private _isCorrect: boolean;\n  private _readOnly: boolean;\n  private _DOMElement: HTMLElement;\n  private _view: CellView;\n\n  constructor({\n    readOnly = false,\n    val = null,\n    DOMElement,\n  }: {\n    readOnly?: boolean;\n    val?: SudokuCellValue;\n    DOMElement: HTMLElement;\n  }) {\n    this._isCorrect = true;\n    this._val = val;\n    this._readOnly = readOnly;\n    console.assert(!!DOMElement, 'DOM element falsy!');\n    this._DOMElement = DOMElement;\n    this._view = new CellView(DOMElement);\n  }\n\n  public get isCorrect(): boolean {\n    return this._isCorrect;\n  }\n\n  public set isCorrect(correct: boolean) {\n    this._isCorrect = correct;\n    this._view.isCorrect = correct;\n  }\n\n  public get val() {\n    return this._val;\n  }\n\n  public set val(newVal: SudokuCellValue) {\n    if (newVal === this._val || this._readOnly) {\n      return;\n    }\n    this._val = newVal;\n    const DOMText = newVal === null ? '' : String(newVal);\n    this._DOMElement.innerHTML = DOMText;\n  }\n}\n","export const createDOM = function createSudokuDOMView(): {\n  DOMmatrix: HTMLElement[][];\n  sudokuDOM: HTMLElement;\n  checkBtn: HTMLButtonElement;\n  [key: string]: any; // TODO: Remove this later. For dev purposes only!\n} {\n  const sudokuDOM = document.createElement('div');\n  sudokuDOM.classList.add('sudoku-DOM');\n\n  const { sudokuTable, DOMmatrix } = makeTable();\n  sudokuDOM.appendChild(sudokuTable);\n\n  const checkBtn = makeCheckButton();\n  sudokuDOM.appendChild(checkBtn);\n\n  // TODO: add solve logic.\n  // const solveBtn = makeSolveButton();\n  // sudokuDOM.appendChild(solveBtn);\n\n  return { DOMmatrix, sudokuDOM, checkBtn };\n};\n\nconst makeTable = () => {\n  const sudokuTable = document.createElement('div');\n  sudokuTable.classList.add('sudoku-table');\n  const DOMmatrix: HTMLElement[][] = [];\n\n  for (let i = 0; i < 9; i++) {\n    const sudokuRow = document.createElement('div');\n    sudokuRow.classList.add('sudoku-row');\n    sudokuTable.appendChild(sudokuRow);\n    DOMmatrix[i] = [];\n\n    for (let j = 0; j < 9; j++) {\n      const sudokuCell = makeSudokuCell(i, j);\n      sudokuRow.appendChild(sudokuCell);\n      DOMmatrix[i][j] = sudokuCell;\n    }\n  }\n  return { sudokuTable, DOMmatrix };\n};\n\nconst makeSudokuCell = function makeSudokuCellDOMElement(i: number, j: number) {\n  const sudokuCell = document.createElement('input');\n  sudokuCell.type = 'number';\n  sudokuCell.maxLength = 1;\n  sudokuCell.style.caretColor = 'transparent';\n  sudokuCell.classList.add('sudoku-cell');\n  addCellBorder(sudokuCell, i, j);\n  sudokuCell.setAttribute('tabindex', '-1');\n  return sudokuCell;\n};\n\nconst addCellBorder = function AddedBorderCssClasses(\n  cellDOM: HTMLElement,\n  row: number,\n  col: number\n): void {\n  if (col % 3 === 0) {\n    cellDOM.classList.add('strong-border-left');\n  }\n  if (col === 8) {\n    cellDOM.classList.add('strong-border-right');\n  }\n  if (row % 3 === 0) {\n    cellDOM.classList.add('strong-border-above');\n  }\n  if (row === 8) {\n    cellDOM.classList.add('strong-border-below');\n  }\n};\n\nconst makeCheckButton = () => {\n  const checkBtn = document.createElement('button');\n  checkBtn.innerHTML = 'Check';\n  checkBtn.classList.add('button', 'button-primary');\n  return checkBtn;\n};\n\nconst makeSolveButton = () => {\n  const solveBtn = document.createElement('button');\n  solveBtn.classList.add('button', 'button-danger');\n  solveBtn.innerHTML = 'Solve';\n  return solveBtn;\n};\n\n// TODO: Add undo and redo buttons (Command pattern).\n","import { SudokuCell } from '../Model/sudokuCell';\r\n\r\nexport class CellValidator {\r\n  constructor(private readonly matrix: SudokuCell[][]) {}\r\n\r\n  public getInvalidCells(): Set<SudokuCell> {\r\n    const invalidCells = new Set<SudokuCell>();\r\n    for (let i = 0; i < 9; i++) {\r\n      for (const cell of this.getInvalidCellsFromRow(i)) {\r\n        invalidCells.add(cell);\r\n      }\r\n      for (const cell of this.getInvalidCellsFromCol(i)) {\r\n        invalidCells.add(cell);\r\n      }\r\n    }\r\n    for (let i = 0; i < 3; i++) {\r\n      for (let j = 0; j < 3; j++) {\r\n        for (const cell of this.getInvalidCellsFromSquare(i, j)) {\r\n          invalidCells.add(cell);\r\n        }\r\n      }\r\n    }\r\n    return invalidCells;\r\n  }\r\n\r\n  private getInvalidCellsFromRow(row: number): Set<SudokuCell> {\r\n    console.assert(0 <= row && row < 9, 'Row number is invalid.');\r\n    return CellValidator.invalidCellsFromArray(this.matrix[row]);\r\n  }\r\n\r\n  private getInvalidCellsFromCol(col: number): Set<SudokuCell> {\r\n    console.assert(0 <= col && col < 9, 'Col number is invalid.');\r\n    const cells = [];\r\n    for (let row = 0; row < 9; row++) {\r\n      cells.push(this.matrix[row][col]);\r\n    }\r\n    return CellValidator.invalidCellsFromArray(cells);\r\n  }\r\n\r\n  private getInvalidCellsFromSquare(xAxis: number, yAxis: number) {\r\n    const cells = [];\r\n    for (let row = 0 + 3 * yAxis; row < 3 + 3 * yAxis; row++) {\r\n      for (let col = 0 + 3 * xAxis; col < 3 + 3 * xAxis; col++) {\r\n        cells.push(this.matrix[row][col]);\r\n      }\r\n    }\r\n    return CellValidator.invalidCellsFromArray(cells);\r\n  }\r\n\r\n  private static invalidCellsFromArray(cells: SudokuCell[]): Set<SudokuCell> {\r\n    const invalidCells = new Set<SudokuCell>();\r\n    const repeated = new Set<number>();\r\n    const vals = new Set<number>();\r\n    for (const val of cells.map((cell) => cell.val)) {\r\n      if (val === null) {\r\n        continue;\r\n      }\r\n      if (vals.has(val)) {\r\n        repeated.add(val);\r\n      }\r\n      vals.add(val);\r\n    }\r\n    for (const cell of cells) {\r\n      if (cell.val === null) {\r\n        continue;\r\n      }\r\n      if (repeated.has(cell.val)) {\r\n        invalidCells.add(cell);\r\n      }\r\n    }\r\n    return invalidCells;\r\n  }\r\n}\r\n","import {\n  isSudokuValue,\n  SudokuCell,\n  SudokuCellValue,\n} from '../Model/sudokuCell';\nimport { createDOM } from '../View/sudokuView';\nimport { CellValidator } from './cell-validator';\n\nexport class SudokuController {\n  private matrix: SudokuCell[][];\n  private cellValidator: CellValidator;\n\n  constructor(root: HTMLElement) {\n    const { DOMmatrix, sudokuDOM, checkBtn } = createDOM();\n    this.matrix = SudokuController.createMatrix(DOMmatrix);\n    this.cellValidator = new CellValidator(this.matrix);\n    root.appendChild(sudokuDOM);\n    // TODO: Added removing from root!?\n    // TODO: Add new game/clear.\n\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        this.addEventListenersToCell(row, col, DOMmatrix[row][col]);\n      }\n    }\n\n    // TODO: remove listeners on close.\n    const clickCheckBtn = () => {\n      this.updateCellValidityView();\n    };\n    checkBtn.addEventListener('click', clickCheckBtn);\n\n    this.addGlobalKeyPressListeners();\n  }\n\n  public get matrixValue() {\n    const matrixValues = [];\n    for (let i = 0; i < this.matrix.length; i++) {\n      matrixValues[i] = this.matrix[i].map((cell) => cell.val);\n    }\n    return matrixValues;\n  }\n\n  public set matrixValue(newMatrix: SudokuCellValue[][]) {\n    // TODO: Get from api.\n    const isValidMatrix = (matrix: SudokuCellValue[][]) =>\n      matrix.length === 9 && matrix.every((row) => row.length === 9);\n\n    if (!isValidMatrix(newMatrix)) {\n      console.error('Bad newMatrix!', newMatrix);\n      return;\n    }\n\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        this.matrix[row][col].val = newMatrix[row][col];\n      }\n    }\n  }\n\n  private static createMatrix(DOMMatrix: HTMLElement[][]): SudokuCell[][] {\n    const matrix: SudokuCell[][] = [];\n    for (let i = 0; i < 9; i++) {\n      matrix[i] = [];\n      for (let j = 0; j < 9; j++) {\n        matrix[i][j] = new SudokuCell({ DOMElement: DOMMatrix[i][j] });\n      }\n    }\n    return matrix;\n  }\n\n  private updateCellValidityView() {\n    const invalidCells = this.getInvalidCells();\n    for (const cell of this.getAllCells()) {\n      cell.isCorrect = !invalidCells.has(cell);\n    }\n  }\n\n  private clearCellValidityView() {\n    this.getAllCells().forEach((cell) => {\n      cell.isCorrect = true;\n    });\n  }\n\n  private getCellByRowCol(row: number, col: number): SudokuCell {\n    return this.matrix[row][col];\n  }\n\n  private getAllCells() {\n    const cells = [];\n    for (const row of this.matrix) {\n      for (const cell of row) {\n        cells.push(cell);\n      }\n    }\n    return cells;\n  }\n\n  private addEventListenersToCell = (\n    row: number,\n    col: number,\n    cell: HTMLElement\n  ) => {\n    cell.addEventListener('keydown', (event: KeyboardEvent) => {\n      event.preventDefault();\n      const setDOMValue = (newVal: string) =>\n        ((event.target as any).value = newVal);\n      const cell = this.getCellByRowCol(row, col);\n      const val = Number(event.key);\n      const isValidNumber = val !== NaN && 1 <= val && val <= 9;\n      if (isValidNumber) {\n        this.trySetCellValue(cell, val) && setDOMValue(String(val));\n        return;\n      }\n      if (['Backspace', 'Delete', 'x'].includes(event.key)) {\n        this.trySetCellValue(cell, null) && setDOMValue('');\n      }\n    });\n  };\n\n  private addGlobalKeyPressListeners = (): void => {\n    document.addEventListener('keydown', (event) => {\n      if (event.key === 'c') {\n        this.updateCellValidityView();\n      }\n    });\n  };\n\n  private trySetCellValue(cell: SudokuCell, val: any) {\n    this.clearCellValidityView();\n    if (isSudokuValue(val)) {\n      cell.val = val;\n      if (this.checkWin()) {\n        // TODO: Do something on victory!\n        alert('Yo win!');\n      }\n      return true;\n    }\n    return false;\n  }\n\n  private checkWin(): boolean {\n    return this.checkIfAllCellsAreFilled() && this.getInvalidCells().size === 0;\n  }\n\n  private checkIfAllCellsAreFilled(): boolean {\n    return this.getAllCells().every((cell) => cell.val !== null);\n  }\n\n  private getInvalidCells() {\n    return this.cellValidator.getInvalidCells();\n  }\n}\n","import { SudokuController } from './Controller/sudoku-controller';\n\nconst main = function appendSudokuGameToRoot(rootId = 'root') {\n  const root = document.getElementById(rootId);\n  if (!root) {\n    console.error(`Couldn't get the root element for the sudoku board.`);\n    return;\n  }\n  const sudoku = new SudokuController(root);\n  document.addEventListener('keypress', (event) => {\n    if (event.key === 't') {\n      console.table(sudoku.matrixValue);\n    }\n  });\n};\n\nmain();\n"],"names":["$b7d77295662d2981$export$bf77f9392c7bc300","_DOMElement","isCorrect","correct","classList","remove","this","add","$f04003de3014ba7e$export$ddb3952bb0cb058f","readOnly","val","DOMElement","_isCorrect","_val","_readOnly","console","assert","_view","newVal","DOMText","String","innerHTML","$97d7a88002c327ed$var$makeTable","sudokuTable","document","createElement","DOMmatrix","i","sudokuRow","appendChild","j","sudokuCell","$97d7a88002c327ed$var$makeSudokuCell","type","maxLength","style","caretColor","$97d7a88002c327ed$var$addCellBorder","setAttribute","cellDOM","row","col","$97d7a88002c327ed$var$makeCheckButton","checkBtn","$032a6428eb20e917$export$aa97a4245acfe3","matrix","getInvalidCells","invalidCells","Set","cell","getInvalidCellsFromRow","cell1","getInvalidCellsFromCol","i1","getInvalidCellsFromSquare","invalidCellsFromArray","cells","push","xAxis","yAxis","repeated","vals","map","has","$1c8432b15b90d077$export$ad24c3da20ce430c","root","addEventListenersToCell","addEventListener","event","preventDefault","setDOMValue","target","value","getCellByRowCol","Number","key","trySetCellValue","includes","addGlobalKeyPressListeners","updateCellValidityView","sudokuDOM","$97d7a88002c327ed$export$c55d40cc59fef13c","createMatrix","cellValidator","row1","col1","matrixValue","matrixValues","length","newMatrix","every","error","DOMMatrix","getAllCells","clearCellValidityView","forEach","row2","checkWin","alert","checkIfAllCellsAreFilled","size","rootId","getElementById","sudoku","table","$ca7b339a1b24dc80$var$main"],"version":3,"file":"index.d9c2bf82.js.map"}