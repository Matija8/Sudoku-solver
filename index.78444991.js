class e{constructor(e){this._DOMElement=e,this.isCorrect=!0}set isCorrect(e){e?this._DOMElement.classList.remove("invalid-cell"):this._DOMElement.classList.add("invalid-cell")}}class t{constructor({readOnly:t=!1,val:l=null,DOMElement:s}){this._isCorrect=!0,this._val=l,this._readOnly=t,console.assert(!!s,"DOM element falsy!"),this._DOMElement=s,this._view=new e(s)}get isCorrect(){return this._isCorrect}set isCorrect(e){this._isCorrect=e,this._view.isCorrect=e}get val(){return this._val}set val(e){if(e===this._val||this._readOnly)return;this._val=e;const t=null===e?"":String(e);this._DOMElement.innerHTML=t}}const l=()=>{const e=document.createElement("div");e.classList.add("sudoku-table");const t=[];for(let l=0;l<9;l++){const i=document.createElement("div");i.classList.add("sudoku-row"),e.appendChild(i),t[l]=[];for(let e=0;e<9;e++){const r=s(l,e);i.appendChild(r),t[l][e]=r}}return{sudokuTable:e,DOMmatrix:t}},s=function(e,t){const l=document.createElement("div");return l.classList.add("sudoku-cell"),i(l,e,t),l.setAttribute("tabindex","-1"),l},i=function(e,t,l){l%3==0&&e.classList.add("strong-border-left"),8===l&&e.classList.add("strong-border-right"),t%3==0&&e.classList.add("strong-border-above"),8===t&&e.classList.add("strong-border-below")},r=()=>{const e=document.createElement("button");return e.innerHTML="Check",e.classList.add("button","button-primary"),e};class n{constructor(e){this.addEventListenersToCell=(e,t,l)=>{l.addEventListener("focus",(()=>{this.setActiveCellByRowCol(e,t)})),l.addEventListener("blur",(()=>{this.dropActiveCell()}))},this.addGlobalKeyPressListeners=()=>{document.addEventListener("keydown",(e=>{if("c"===e.key&&this.updateCellValidityView(),null===this.activeCell)return;"Escape"===e.key&&this.dropActiveCell(),["Backspace","Delete","x","d"].includes(e.key)&&this.setActiveCellValue(null);const t=parseInt(e.key);[null,1,2,3,4,5,6,7,8,9].includes(t)&&(this.setActiveCellValue(t),this.checkWin())}))},this._activeCell=null;const{DOMmatrix:t,sudokuDOM:s,checkBtn:i}=function(){const e=document.createElement("div");e.classList.add("sudoku-DOM");const{sudokuTable:t,DOMmatrix:s}=l();e.appendChild(t);const i=r();return e.appendChild(i),{DOMmatrix:s,sudokuDOM:e,checkBtn:i}}();this.matrix=n.createMatrix(t),e.appendChild(s);for(let e=0;e<9;e++)for(let l=0;l<9;l++)this.addEventListenersToCell(e,l,t[e][l]);i.addEventListener("click",(()=>{this.updateCellValidityView()})),this.addGlobalKeyPressListeners()}get matrixValue(){const e=[];for(let t=0;t<this.matrix.length;t++)e[t]=this.matrix[t].map((e=>e.val));return e}static createMatrix(e){const l=[];for(let s=0;s<9;s++){l[s]=[];for(let i=0;i<9;i++)l[s][i]=new t({DOMElement:e[s][i]})}return l}updateCellValidityView(){const e=this.getInvalidCells();for(const t of this.getAllCells())t.isCorrect=!e.has(t)}getCellByRowCol(e,t){return this.matrix[e][t]}getAllCells(){const e=[];for(const t of this.matrix)for(const l of t)e.push(l);return e}get activeCell(){return this._activeCell}set activeCell(e){this._activeCell!==e&&(this._activeCell=e)}setActiveCellByRowCol(e,t){const l=this.getCellByRowCol(e,t);l&&(this.activeCell=l)}dropActiveCell(){this.activeCell=null}setActiveCellValue(e){this.activeCell&&(this.activeCell.val=e)}checkWin(){return!!this.checkIfAllCellsAreFilled()&&0===this.getInvalidCells().size}checkIfAllCellsAreFilled(){for(const e of this.getAllCells())if(null===e.val)return!1;return!0}getInvalidCells(){const e=new Set;for(let t=0;t<9;t++){for(const l of this.getInvalidCellsFromRow(t))e.add(l);for(const l of this.getInvalidCellsFromCol(t))e.add(l)}for(let t=0;t<3;t++)for(let l=0;l<3;l++)for(const s of this.getInvalidCellsFromSquare(t,l))e.add(s);return e}getInvalidCellsFromRow(e){return console.assert(0<=e&&e<9,"Row number is invalid."),n.invalidCellsFromArray(this.matrix[e])}getInvalidCellsFromCol(e){console.assert(0<=e&&e<9,"Col number is invalid.");const t=[];for(let l=0;l<9;l++)t.push(this.matrix[l][e]);return n.invalidCellsFromArray(t)}getInvalidCellsFromSquare(e,t){const l=[];for(let s=0+3*t;s<3+3*t;s++)for(let t=0+3*e;t<3+3*e;t++)l.push(this.matrix[s][t]);return n.invalidCellsFromArray(l)}static invalidCellsFromArray(e){const t=new Set,l=new Set,s=new Set;for(const t of e.map((e=>e.val)))null!==t&&(s.has(t)&&l.add(t),s.add(t));for(const s of e)null!==s.val&&l.has(s.val)&&t.add(s);return t}}!function(e="root"){const t=document.getElementById(e);if(null===t)return void console.error("Couldn't get the root element for the sudoku board.");const l=new n(t);document.addEventListener("keypress",(e=>{"t"===e.key&&console.table(l.matrixValue)}))}();
//# sourceMappingURL=index.78444991.js.map
