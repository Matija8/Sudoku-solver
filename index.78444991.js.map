{"mappings":"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","sources":["src/View/CellView.ts","src/Model/sudokuCell.ts","src/View/sudokuView.ts","src/Controller/sudoku.ts","src/main.ts"],"sourcesContent":["export class CellView {\n  constructor(private _DOMElement: HTMLElement) {\n    this.isCorrect = true;\n  }\n\n  public set isCorrect(correct: boolean) {\n    if (!correct) {\n      this._DOMElement.classList.add('invalid-cell');\n    } else {\n      this._DOMElement.classList.remove('invalid-cell');\n    }\n  }\n}\n","import { CellView } from '../View/CellView';\n\nexport type SudokuCellValue = null | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;\n\nexport const isSudokuValue = function isValidSudokuCellValue(\n  n: number | null\n): n is SudokuCellValue {\n  return [null, 1, 2, 3, 4, 5, 6, 7, 8, 9].includes(n);\n};\n\nexport class SudokuCell {\n  private _val: SudokuCellValue;\n  private _isCorrect: boolean;\n  private _readOnly: boolean;\n  private _DOMElement: HTMLElement;\n  private _view: CellView;\n\n  constructor({\n    readOnly = false,\n    val = null,\n    DOMElement,\n  }: {\n    readOnly?: boolean;\n    val?: SudokuCellValue;\n    DOMElement: HTMLElement;\n  }) {\n    this._isCorrect = true;\n    this._val = val;\n    this._readOnly = readOnly;\n    console.assert(!!DOMElement, 'DOM element falsy!');\n    this._DOMElement = DOMElement;\n    this._view = new CellView(DOMElement);\n  }\n\n  public get isCorrect(): boolean {\n    return this._isCorrect;\n  }\n\n  public set isCorrect(correct: boolean) {\n    this._isCorrect = correct;\n    this._view.isCorrect = correct;\n  }\n\n  public get val() {\n    return this._val;\n  }\n\n  public set val(newVal: SudokuCellValue) {\n    if (newVal === this._val || this._readOnly) {\n      return;\n    }\n    this._val = newVal;\n    const DOMText = newVal === null ? '' : String(newVal);\n    this._DOMElement.innerHTML = DOMText;\n  }\n}\n","export const createDOM = function createSudokuDOMView(): {\n  DOMmatrix: HTMLElement[][];\n  sudokuDOM: HTMLElement;\n  checkBtn: HTMLButtonElement;\n  [key: string]: any; // TODO: Remove this later. For dev purposes only!\n} {\n  const sudokuDOM = document.createElement('div');\n  sudokuDOM.classList.add('sudoku-DOM');\n\n  const { sudokuTable, DOMmatrix } = makeTable();\n  sudokuDOM.appendChild(sudokuTable);\n\n  const checkBtn = makeCheckButton();\n  sudokuDOM.appendChild(checkBtn);\n\n  // TODO: add solve logic.\n  // const solveBtn = makeSolveButton();\n  // sudokuDOM.appendChild(solveBtn);\n\n  return { DOMmatrix, sudokuDOM, checkBtn };\n};\n\nconst makeTable = () => {\n  const sudokuTable = document.createElement('div');\n  sudokuTable.classList.add('sudoku-table');\n  const DOMmatrix: HTMLElement[][] = [];\n\n  for (let i = 0; i < 9; i++) {\n    const sudokuRow = document.createElement('div');\n    sudokuRow.classList.add('sudoku-row');\n    sudokuTable.appendChild(sudokuRow);\n    DOMmatrix[i] = [];\n\n    for (let j = 0; j < 9; j++) {\n      const sudokuCell = makeSudokuCell(i, j);\n      sudokuRow.appendChild(sudokuCell);\n      DOMmatrix[i][j] = sudokuCell;\n    }\n  }\n  return { sudokuTable, DOMmatrix };\n};\n\nconst makeSudokuCell = function makeSudokuCellDOMElement(i: number, j: number) {\n  const sudokuCell = document.createElement('div');\n  sudokuCell.classList.add('sudoku-cell');\n  addCellBorder(sudokuCell, i, j);\n  sudokuCell.setAttribute('tabindex', '-1');\n  return sudokuCell;\n};\n\nconst addCellBorder = function AddedBorderCssClasses(\n  cellDOM: HTMLElement,\n  row: number,\n  col: number\n): void {\n  if (col % 3 === 0) {\n    cellDOM.classList.add('strong-border-left');\n  }\n  if (col === 8) {\n    cellDOM.classList.add('strong-border-right');\n  }\n  if (row % 3 === 0) {\n    cellDOM.classList.add('strong-border-above');\n  }\n  if (row === 8) {\n    cellDOM.classList.add('strong-border-below');\n  }\n};\n\nconst makeCheckButton = () => {\n  const checkBtn = document.createElement('button');\n  checkBtn.innerHTML = 'Check';\n  checkBtn.classList.add('button', 'button-primary');\n  return checkBtn;\n};\n\nconst makeSolveButton = () => {\n  const solveBtn = document.createElement('button');\n  solveBtn.classList.add('button', 'button-danger');\n  solveBtn.innerHTML = 'Solve';\n  return solveBtn;\n};\n\n// TODO: Add undo and redo buttons (Command pattern).\n","import {\n  SudokuCellValue,\n  isSudokuValue,\n  SudokuCell,\n} from '../Model/sudokuCell';\nimport { createDOM } from '../View/sudokuView';\n\nexport class Sudoku {\n  private matrix: SudokuCell[][];\n  private _activeCell: SudokuCell | null;\n\n  constructor(root: HTMLElement) {\n    this._activeCell = null;\n\n    const { DOMmatrix, sudokuDOM, checkBtn } = createDOM();\n    this.matrix = Sudoku.createMatrix(DOMmatrix);\n    root.appendChild(sudokuDOM);\n    // TODO: Added removing from root!?\n    // TODO: Add new game/clear.\n\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        this.addEventListenersToCell(row, col, DOMmatrix[row][col]);\n      }\n    }\n\n    // TODO: remove listeners on close.\n    const clickCheckBtn = () => {\n      this.updateCellValidityView();\n    };\n    checkBtn.addEventListener('click', clickCheckBtn);\n\n    this.addGlobalKeyPressListeners();\n  }\n\n  public get matrixValue() {\n    // Return copy of the sudoku matrix.\n    const newMatrix = [];\n    for (let i = 0; i < this.matrix.length; i++) {\n      newMatrix[i] = this.matrix[i].map((cell) => cell.val);\n    }\n    return newMatrix;\n  }\n\n  // * Setup methods *\n\n  private static createMatrix(DOMMatrix: HTMLElement[][]): SudokuCell[][] {\n    const matrix: SudokuCell[][] = [];\n    for (let i = 0; i < 9; i++) {\n      matrix[i] = [];\n      for (let j = 0; j < 9; j++) {\n        matrix[i][j] = new SudokuCell({ DOMElement: DOMMatrix[i][j] });\n      }\n    }\n    return matrix;\n  }\n\n  // * View *\n\n  private updateCellValidityView() {\n    const invalidCells = this.getInvalidCells();\n    for (const cell of this.getAllCells()) {\n      cell.isCorrect = !invalidCells.has(cell);\n    }\n  }\n\n  // * Cell getter methods *\n\n  private getCellByRowCol(row: number, col: number): SudokuCell {\n    return this.matrix[row][col];\n  }\n\n  private getAllCells() {\n    const cells = [];\n    for (const row of this.matrix) {\n      for (const cell of row) {\n        cells.push(cell);\n      }\n    }\n    return cells;\n  }\n\n  // * Active cell methods *\n\n  private get activeCell(): SudokuCell | null {\n    return this._activeCell;\n  }\n\n  private set activeCell(newActiveCell: SudokuCell | null) {\n    if (this._activeCell === newActiveCell) {\n      return;\n    }\n    this._activeCell = newActiveCell;\n  }\n\n  private setActiveCellByRowCol(row: number, col: number): void {\n    const newActiveCell = this.getCellByRowCol(row, col);\n    if (!newActiveCell) {\n      return;\n    }\n    this.activeCell = newActiveCell;\n  }\n\n  private dropActiveCell(): void {\n    this.activeCell = null;\n  }\n\n  private setActiveCellValue(val: SudokuCellValue) {\n    if (!this.activeCell) {\n      return;\n    }\n    this.activeCell.val = val;\n  }\n\n  // * Listener adding methods *\n\n  private addEventListenersToCell = (\n    row: number,\n    col: number,\n    cell: HTMLElement\n  ) => {\n    cell.addEventListener('focus', () => {\n      this.setActiveCellByRowCol(row, col);\n    });\n    cell.addEventListener('blur', () => {\n      this.dropActiveCell();\n    });\n  };\n\n  private addGlobalKeyPressListeners = (): void => {\n    document.addEventListener('keydown', (event) => {\n      // Non-cell keypresses.\n      if (event.key === 'c') {\n        this.updateCellValidityView();\n      }\n\n      // Cell keypresses.\n      if (this.activeCell === null) {\n        return;\n      }\n\n      if (event.key === 'Escape') {\n        this.dropActiveCell();\n      }\n\n      if (['Backspace', 'Delete', 'x', 'd'].includes(event.key)) {\n        this.setActiveCellValue(null);\n      }\n\n      const val = parseInt(event.key);\n      if (isSudokuValue(val)) {\n        this.setActiveCellValue(val);\n        if (this.checkWin()) {\n          // TODO: Do something on victory!\n        }\n      }\n    });\n  };\n\n  // * Win condition *\n\n  private checkWin(): boolean {\n    if (!this.checkIfAllCellsAreFilled()) {\n      return false;\n    }\n\n    return this.getInvalidCells().size === 0;\n  }\n\n  private checkIfAllCellsAreFilled(): boolean {\n    for (const cell of this.getAllCells()) {\n      if (cell.val === null) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // * Cell validity methods *\n\n  private getInvalidCells(): Set<SudokuCell> {\n    const invalidCells = new Set<SudokuCell>();\n    for (let i = 0; i < 9; i++) {\n      for (const cell of this.getInvalidCellsFromRow(i)) {\n        invalidCells.add(cell);\n      }\n      for (const cell of this.getInvalidCellsFromCol(i)) {\n        invalidCells.add(cell);\n      }\n    }\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        for (const cell of this.getInvalidCellsFromSquare(i, j)) {\n          invalidCells.add(cell);\n        }\n      }\n    }\n    return invalidCells;\n  }\n\n  private getInvalidCellsFromRow(row: number): Set<SudokuCell> {\n    // Return invalid cells in row {row}.\n    console.assert(0 <= row && row < 9, 'Row number is invalid.');\n    return Sudoku.invalidCellsFromArray(this.matrix[row]);\n  }\n\n  private getInvalidCellsFromCol(col: number): Set<SudokuCell> {\n    // Return invalid cells in col {col}.\n    console.assert(0 <= col && col < 9, 'Col number is invalid.');\n    const cells = [];\n    for (let row = 0; row < 9; row++) {\n      cells.push(this.matrix[row][col]);\n    }\n    return Sudoku.invalidCellsFromArray(cells);\n  }\n\n  private getInvalidCellsFromSquare(xAxis: number, yAxis: number) {\n    // xAxis/yAxis -> 0 | 1 | 2;\n    const cells = [];\n    for (let row = 0 + 3 * yAxis; row < 3 + 3 * yAxis; row++) {\n      for (let col = 0 + 3 * xAxis; col < 3 + 3 * xAxis; col++) {\n        cells.push(this.matrix[row][col]);\n      }\n    }\n    return Sudoku.invalidCellsFromArray(cells);\n  }\n\n  private static invalidCellsFromArray(cells: SudokuCell[]): Set<SudokuCell> {\n    const invalidCells = new Set<SudokuCell>();\n    const repeated = new Set<number>();\n    const vals = new Set<number>();\n    for (const val of cells.map((cell) => cell.val)) {\n      if (val === null) {\n        continue;\n      }\n      if (vals.has(val)) {\n        repeated.add(val);\n      }\n      vals.add(val);\n    }\n    for (const cell of cells) {\n      if (cell.val === null) {\n        continue;\n      }\n      if (repeated.has(cell.val)) {\n        invalidCells.add(cell);\n      }\n    }\n    return invalidCells;\n  }\n}\n","import { Sudoku } from './Controller/sudoku';\n\n\nconst main = function appendSudokuGameToRoot(rootId = 'root') {\n  const root = document.getElementById(rootId);\n  if (root === null) {\n    console.error(`Couldn't get the root element for the sudoku board.`);\n    return;\n  }\n  const sudoku = new Sudoku(root);\n  document.addEventListener('keypress', event => {\n    if (event.key === 't') {\n      console.table(sudoku.matrixValue);\n    }\n  });\n}\n\nmain();\n"],"names":["$b7d77295662d2981$export$bf77f9392c7bc300","_DOMElement","isCorrect","correct","classList","remove","this","add","$f04003de3014ba7e$export$ddb3952bb0cb058f","readOnly","val","DOMElement","_isCorrect","_val","_readOnly","console","assert","_view","newVal","DOMText","String","innerHTML","$97d7a88002c327ed$var$makeTable","sudokuTable","document","createElement","DOMmatrix","i","sudokuRow","appendChild","j","sudokuCell","$97d7a88002c327ed$var$makeSudokuCell","$97d7a88002c327ed$var$addCellBorder","setAttribute","cellDOM","row","col","$97d7a88002c327ed$var$makeCheckButton","checkBtn","$550f6d3af55d4a49$export$795ac0cf1bb38be2","root","addEventListenersToCell","cell","addEventListener","setActiveCellByRowCol","dropActiveCell","addGlobalKeyPressListeners","event","key","updateCellValidityView","activeCell","includes","setActiveCellValue","parseInt","checkWin","_activeCell","sudokuDOM","$97d7a88002c327ed$export$c55d40cc59fef13c","matrix","createMatrix","row1","col1","matrixValue","newMatrix","length","map","DOMMatrix","invalidCells","getInvalidCells","getAllCells","has","getCellByRowCol","cells","row2","push","newActiveCell","checkIfAllCellsAreFilled","size","Set","getInvalidCellsFromRow","cell1","getInvalidCellsFromCol","i1","getInvalidCellsFromSquare","invalidCellsFromArray","xAxis","yAxis","col2","repeated","vals","rootId","getElementById","error","sudoku","table","$ca7b339a1b24dc80$var$main"],"version":3,"file":"index.78444991.js.map"}