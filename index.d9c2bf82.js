class e{constructor(e){this._DOMElement=e,this.isCorrect=!0}set isCorrect(e){e?this._DOMElement.classList.remove("invalid-cell"):this._DOMElement.classList.add("invalid-cell")}}class t{constructor({readOnly:t=!1,val:l=null,DOMElement:s}){this._isCorrect=!0,this._val=l,this._readOnly=t,console.assert(!!s,"DOM element falsy!"),this._DOMElement=s,this._view=new e(s)}get isCorrect(){return this._isCorrect}set isCorrect(e){this._isCorrect=e,this._view.isCorrect=e}get val(){return this._val}set val(e){if(e===this._val||this._readOnly)return;this._val=e;const t=null===e?"":String(e);this._DOMElement.innerHTML=t}}const l=()=>{const e=document.createElement("div");e.classList.add("sudoku-table");const t=[];for(let l=0;l<9;l++){const r=document.createElement("div");r.classList.add("sudoku-row"),e.appendChild(r),t[l]=[];for(let e=0;e<9;e++){const n=s(l,e);r.appendChild(n),t[l][e]=n}}return{sudokuTable:e,DOMmatrix:t}},s=function(e,t){const l=document.createElement("input");return l.type="number",l.maxLength=1,l.style.caretColor="transparent",l.classList.add("sudoku-cell"),r(l,e,t),l.setAttribute("tabindex","-1"),l},r=function(e,t,l){l%3==0&&e.classList.add("strong-border-left"),8===l&&e.classList.add("strong-border-right"),t%3==0&&e.classList.add("strong-border-above"),8===t&&e.classList.add("strong-border-below")},n=()=>{const e=document.createElement("button");return e.innerHTML="Check",e.classList.add("button","button-primary"),e};class i{constructor(e){this.matrix=e}getInvalidCells(){const e=new Set;for(let t=0;t<9;t++){for(const l of this.getInvalidCellsFromRow(t))e.add(l);for(const l of this.getInvalidCellsFromCol(t))e.add(l)}for(let t=0;t<3;t++)for(let l=0;l<3;l++)for(const s of this.getInvalidCellsFromSquare(t,l))e.add(s);return e}getInvalidCellsFromRow(e){return console.assert(0<=e&&e<9,"Row number is invalid."),i.invalidCellsFromArray(this.matrix[e])}getInvalidCellsFromCol(e){console.assert(0<=e&&e<9,"Col number is invalid.");const t=[];for(let l=0;l<9;l++)t.push(this.matrix[l][e]);return i.invalidCellsFromArray(t)}getInvalidCellsFromSquare(e,t){const l=[];for(let s=0+3*t;s<3+3*t;s++)for(let t=0+3*e;t<3+3*e;t++)l.push(this.matrix[s][t]);return i.invalidCellsFromArray(l)}static invalidCellsFromArray(e){const t=new Set,l=new Set,s=new Set;for(const t of e.map((e=>e.val)))null!==t&&(s.has(t)&&l.add(t),s.add(t));for(const s of e)null!==s.val&&l.has(s.val)&&t.add(s);return t}}class o{constructor(e){this.addEventListenersToCell=(e,t,l)=>{l.addEventListener("keydown",(l=>{l.preventDefault();const s=e=>l.target.value=e,r=this.getCellByRowCol(e,t),n=Number(l.key);1<=n&&n<=9?this.trySetCellValue(r,n)&&s(String(n)):["Backspace","Delete","x"].includes(l.key)&&this.trySetCellValue(r,null)&&s("")}))},this.addGlobalKeyPressListeners=()=>{document.addEventListener("keydown",(e=>{"c"===e.key&&this.updateCellValidityView()}))};const{DOMmatrix:t,sudokuDOM:s,checkBtn:r}=function(){const e=document.createElement("div");e.classList.add("sudoku-DOM");const{sudokuTable:t,DOMmatrix:s}=l();e.appendChild(t);const r=n();return e.appendChild(r),{DOMmatrix:s,sudokuDOM:e,checkBtn:r}}();this.matrix=o.createMatrix(t),this.cellValidator=new i(this.matrix),e.appendChild(s);for(let e=0;e<9;e++)for(let l=0;l<9;l++)this.addEventListenersToCell(e,l,t[e][l]);r.addEventListener("click",(()=>{this.updateCellValidityView()})),this.addGlobalKeyPressListeners()}get matrixValue(){const e=[];for(let t=0;t<this.matrix.length;t++)e[t]=this.matrix[t].map((e=>e.val));return e}set matrixValue(e){var t;if(9===(t=e).length&&t.every((e=>9===e.length)))for(let t=0;t<9;t++)for(let l=0;l<9;l++)this.matrix[t][l].val=e[t][l];else console.error("Bad newMatrix!",e)}static createMatrix(e){const l=[];for(let s=0;s<9;s++){l[s]=[];for(let r=0;r<9;r++)l[s][r]=new t({DOMElement:e[s][r]})}return l}updateCellValidityView(){const e=this.getInvalidCells();for(const t of this.getAllCells())t.isCorrect=!e.has(t)}clearCellValidityView(){this.getAllCells().forEach((e=>{e.isCorrect=!0}))}getCellByRowCol(e,t){return this.matrix[e][t]}getAllCells(){const e=[];for(const t of this.matrix)for(const l of t)e.push(l);return e}trySetCellValue(e,t){return this.clearCellValidityView(),!![null,1,2,3,4,5,6,7,8,9].includes(t)&&(e.val=t,this.checkWin()&&alert("Yo win!"),!0)}checkWin(){return this.checkIfAllCellsAreFilled()&&0===this.getInvalidCells().size}checkIfAllCellsAreFilled(){return this.getAllCells().every((e=>null!==e.val))}getInvalidCells(){return this.cellValidator.getInvalidCells()}}!function(e="root"){const t=document.getElementById(e);if(!t)return void console.error("Couldn't get the root element for the sudoku board.");const l=new o(t);document.addEventListener("keypress",(e=>{"t"===e.key&&console.table(l.matrixValue)}))}();
//# sourceMappingURL=index.d9c2bf82.js.map
