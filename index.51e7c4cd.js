class t{constructor(t){this._DOMElement=t,this.isCorrect=!0}set isCorrect(t){t?this._DOMElement.classList.remove("invalid-cell"):this._DOMElement.classList.add("invalid-cell")}}class e{constructor({readOnly:e=!1,val:l=null,DOMElement:s}){this._isCorrect=!0,this._val=l,this._readOnly=e,console.assert(!!s,"DOM element falsy!"),this._DOMElement=s,this._view=new t(s)}get isCorrect(){return this._isCorrect}set isCorrect(t){this._isCorrect=t,this._view.isCorrect=t}get val(){return this._val}set val(t){if(t===this._val||this._readOnly)return;this._val=t;const e=null===t?"":String(t);this._DOMElement.innerHTML=e}}const l=()=>{const t=document.createElement("div");t.classList.add("sudoku-table");const e=[];for(let l=0;l<9;l++){const r=document.createElement("div");r.classList.add("sudoku-row"),t.appendChild(r),e[l]=[];for(let t=0;t<9;t++){const n=s(l,t);r.appendChild(n),e[l][t]=n}}return{sudokuTable:t,DOMmatrix:e}},s=function(t,e){const l=document.createElement("input");return l.type="number",l.maxLength=1,l.style.caretColor="transparent",l.classList.add("sudoku-cell"),r(l,t,e),l.setAttribute("tabindex","-1"),l},r=function(t,e,l){l%3==0&&t.classList.add("strong-border-left"),8===l&&t.classList.add("strong-border-right"),e%3==0&&t.classList.add("strong-border-above"),8===e&&t.classList.add("strong-border-below")},n=()=>{const t=document.createElement("button");return t.innerHTML="Check",t.classList.add("button","button-primary"),t};class i{constructor(t){this.matrix=t}getInvalidCells(){const t=new Set;for(let e=0;e<9;e++){for(const l of this.getInvalidCellsFromRow(e))t.add(l);for(const l of this.getInvalidCellsFromCol(e))t.add(l)}for(let e=0;e<3;e++)for(let l=0;l<3;l++)for(const s of this.getInvalidCellsFromSquare(e,l))t.add(s);return t}getInvalidCellsFromRow(t){return console.assert(0<=t&&t<9,"Row number is invalid."),i.invalidCellsFromArray(this.matrix[t])}getInvalidCellsFromCol(t){console.assert(0<=t&&t<9,"Col number is invalid.");const e=[];for(let l=0;l<9;l++)e.push(this.matrix[l][t]);return i.invalidCellsFromArray(e)}getInvalidCellsFromSquare(t,e){const l=[];for(let s=0+3*e;s<3+3*e;s++)for(let e=0+3*t;e<3+3*t;e++)l.push(this.matrix[s][e]);return i.invalidCellsFromArray(l)}static invalidCellsFromArray(t){const e=new Set,l=new Set,s=new Set;for(const e of t.map((t=>t.val)))null!==e&&(s.has(e)&&l.add(e),s.add(e));for(const s of t)null!==s.val&&l.has(s.val)&&e.add(s);return e}}class o{constructor(t){this.addEventListenersToCell=(t,e,l)=>{l.addEventListener("keydown",(l=>{l.preventDefault();const s=t=>l.target.value=t,r=this.getCellByRowCol(t,e),n=Number(l.key);1<=n&&n<=9?this.trySetCellValue(r,n)&&s(String(n)):["Backspace","Delete","x"].includes(l.key)&&this.trySetCellValue(r,null)&&s("")}))},this.addGlobalKeyPressListeners=()=>{document.addEventListener("keydown",(t=>{"c"===t.key&&this.updateCellValidityView()}))};const{DOMmatrix:e,sudokuDOM:s,checkBtn:r}=function(){const t=document.createElement("div");t.classList.add("sudoku-DOM");const{sudokuTable:e,DOMmatrix:s}=l();t.appendChild(e);const r=n();return t.appendChild(r),{DOMmatrix:s,sudokuDOM:t,checkBtn:r}}();this.matrix=o.createMatrix(e),this.cellValidator=new i(this.matrix),t.appendChild(s);for(let t=0;t<9;t++)for(let l=0;l<9;l++)this.addEventListenersToCell(t,l,e[t][l]);r.addEventListener("click",(()=>{this.updateCellValidityView()})),this.addGlobalKeyPressListeners()}get matrixValue(){const t=[];for(let e=0;e<this.matrix.length;e++)t[e]=this.matrix[e].map((t=>t.val));return t}static createMatrix(t){const l=[];for(let s=0;s<9;s++){l[s]=[];for(let r=0;r<9;r++)l[s][r]=new e({DOMElement:t[s][r]})}return l}updateCellValidityView(){const t=this.getInvalidCells();for(const e of this.getAllCells())e.isCorrect=!t.has(e)}clearCellValidityView(){this.getAllCells().forEach((t=>{t.isCorrect=!0}))}getCellByRowCol(t,e){return this.matrix[t][e]}getAllCells(){const t=[];for(const e of this.matrix)for(const l of e)t.push(l);return t}trySetCellValue(t,e){return this.clearCellValidityView(),!![null,1,2,3,4,5,6,7,8,9].includes(e)&&(t.val=e,this.checkWin()&&alert("Yo win!"),!0)}checkWin(){return this.checkIfAllCellsAreFilled()&&0===this.getInvalidCells().size}checkIfAllCellsAreFilled(){return this.getAllCells().every((t=>null!==t.val))}getInvalidCells(){return this.cellValidator.getInvalidCells()}}!function(t="root"){const e=document.getElementById(t);if(!e)return void console.error("Couldn't get the root element for the sudoku board.");const l=new o(e);document.addEventListener("keypress",(t=>{"t"===t.key&&console.table(l.matrixValue)}))}();
//# sourceMappingURL=index.51e7c4cd.js.map
